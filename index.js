import { Telegraf, Markup } from "telegraf";
import cron from "node-cron";
import express from "express";

const app = express();
const PORT = process.env.PORT || 3000;

app.get("/", (req, res) => {
  res.status(200).json({ status: "OK" });
});

app.listen(PORT, "0.0.0.0", () => {
  console.log(`Server running on port ${PORT}`);
});

const bot = new Telegraf(process.env.BOT_TOKEN);

// === –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ (–≤ –ø–∞–º—è—Ç–∏) ===
let users = {};

// === –õ–æ–≥–∏–∫–∞ —Å—Ö–µ–º—ã ===
function getPlan(day) {
  if (day <= 3) return { times: 6, interval: 2 };
  if (day <= 12) return { times: 5, interval: 2.5 };
  if (day <= 16) return { times: 4, interval: 3 };
  if (day <= 20) return { times: 3, interval: 5 };
  if (day <= 25) return { times: 2, interval: 12 };
  return null;
}

// === –ö–æ–º–∞–Ω–¥—ã ===
bot.start((ctx) => {
  const id = ctx.from.id;
  if (!users[id]) {
    users[id] = { startDate: null, takenToday: [], active: false };
  }
  ctx.reply(
    "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –ø–∏—Ç—å —Ç–∞–±–ª–µ—Ç–∫–∏ –ø–æ —Å—Ö–µ–º–µ.\n\n" +
      "‚û°Ô∏è –ù–∞–∂–∏–º–∞–π –∫–Ω–æ–ø–∫—É *–ù–æ–≤—ã–π –¥–µ–Ω—å*, –∫–æ–≥–¥–∞ –ø—Ä–æ—Å–Ω—ë—à—å—Å—è –∏ –Ω–∞—á–Ω—ë—à—å –Ω–æ–≤—ã–π –¥–µ–Ω—å –ª–µ—á–µ–Ω–∏—è.\n\n" +
      "–ü–æ–∫–∞ —Ç—ã –Ω–µ –Ω–∞—á–Ω—ë—à—å –Ω–æ–≤—ã–π –¥–µ–Ω—å ‚Äî –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –Ω–µ –±—É–¥–µ—Ç.",
    {
      parse_mode: "Markdown",
      reply_markup: Markup.inlineKeyboard([
        Markup.button.callback("üåÖ –ù–æ–≤—ã–π –¥–µ–Ω—å", "new_day"),
        Markup.button.callback("üíä –í—ã–ø–∏–ª", "taken"),
      ]),
    }
  );
});

// –ó–∞–ø—É—Å–∫ –Ω–æ–≤–æ–≥–æ –¥–Ω—è
bot.action("new_day", (ctx) => {
  const id = ctx.from.id;
  users[id] = {
    startDate: new Date().toISOString(),
    takenToday: [],
    active: true,
  };
  ctx.reply("‚úÖ –ù–æ–≤—ã–π –¥–µ–Ω—å –Ω–∞—á–∞–ª—Å—è! –Ø –±—É–¥—É –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å –ø–æ —Å—Ö–µ–º–µ.");
});

// –û—Ç–º–µ—Ç–∏—Ç—å —Ç–∞–±–ª–µ—Ç–∫—É
bot.action("taken", (ctx) => {
  const id = ctx.from.id;
  if (!users[id]) {
    users[id] = { startDate: null, takenToday: [], active: false };
  }
  if (!users[id].active) {
    return ctx.reply("‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –Ω–∞—á–Ω–∏ –Ω–æ–≤—ã–π –¥–µ–Ω—å –∫–Ω–æ–ø–∫–æ–π *–ù–æ–≤—ã–π –¥–µ–Ω—å*.");
  }
  users[id].takenToday.push(new Date().toISOString());
  ctx.editMessageText("‚úÖ –¢–∞–±–ª–µ—Ç–∫–∞ –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –≤—ã–ø–∏—Ç–∞—è!");
});

// –í–≤–æ–¥ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–∞–±–ª–µ—Ç–æ–∫ –≤—Ä—É—á–Ω—É—é
bot.command("set", (ctx) => {
  const id = ctx.from.id;
  const args = ctx.message.text.split(" ");
  if (args.length < 2 || isNaN(args[1])) {
    return ctx.reply(
      "‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É —Ç–∞–∫: `/set 3` (–≥–¥–µ 3 ‚Äî –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–∞–±–ª–µ—Ç–æ–∫)",
      {
        parse_mode: "Markdown",
      }
    );
  }
  const count = parseInt(args[1]);
  if (!users[id]) {
    users[id] = { startDate: null, takenToday: [], active: false };
  }
  // –∑–∞–º–µ–Ω—è–µ–º –º–∞—Å—Å–∏–≤ –Ω–∞ –Ω—É–∂–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
  users[id].takenToday = Array(count).fill(new Date().toISOString());
  ctx.reply(`‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: ${count} —Ç–∞–±–ª–µ—Ç–æ–∫ –∑–∞ —Å–µ–≥–æ–¥–Ω—è.`);
});

// –ö–æ–º–∞–Ω–¥–∞ –ø–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å
bot.command("progress", (ctx) => {
  const id = ctx.from.id;
  if (!users[id] || !users[id].active) {
    return ctx.reply("‚ÑπÔ∏è –¢—ã –µ—â—ë –Ω–µ –Ω–∞—á–∞–ª –Ω–æ–≤—ã–π –¥–µ–Ω—å.");
  }
  const now = new Date();
  const diffDays =
    Math.floor((now - new Date(users[id].startDate)) / (1000 * 60 * 60 * 24)) +
    1;
  const plan = getPlan(diffDays);
  if (!plan) return ctx.reply("‚úÖ –ö—É—Ä—Å –∑–∞–≤–µ—Ä—à—ë–Ω!");

  const taken = users[id].takenToday.filter(
    (d) => new Date(d).toDateString() === now.toDateString()
  ).length;

  ctx.reply(
    `üìÖ –î–µ–Ω—å ${diffDays}\n` +
      `üíä –í—ã–ø–∏—Ç–æ: ${taken}/${plan.times}\n` +
      `‚è≥ –ò–Ω—Ç–µ—Ä–≤–∞–ª: –∫–∞–∂–¥—ã–µ ${plan.interval} —á.`
  );
});

// –ö—Ä–æ–Ω ‚Äî –∫–∞–∂–¥—ã–π —á–∞—Å –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
cron.schedule("0 * * * *", () => {
  const now = new Date();

  for (const [id, user] of Object.entries(users)) {
    if (!user.active) continue; // –µ—Å–ª–∏ –¥–µ–Ω—å –Ω–µ –Ω–∞—á–∞—Ç, –Ω–µ —à–ª—ë–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è

    const diffDays =
      Math.floor((now - new Date(user.startDate)) / (1000 * 60 * 60 * 24)) + 1;
    const plan = getPlan(diffDays);
    if (!plan) continue;

    const takenToday = user.takenToday.filter(
      (d) => new Date(d).toDateString() === now.toDateString()
    ).length;

    if (takenToday < plan.times) {
      bot.telegram
        .sendMessage(
          id,
          `üíä –ü–æ—Ä–∞ –ø—Ä–∏–Ω—è—Ç—å —Ç–∞–±–ª–µ—Ç–∫—É! (${takenToday + 1}/${plan.times})`,
          {
            reply_markup: Markup.inlineKeyboard([
              Markup.button.callback("‚úÖ –í—ã–ø–∏–ª", "taken"),
            ]),
          }
        )
        .catch((error) => {
          console.error(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${id}:`, error);
        });
    }
  }
});

bot.launch();
