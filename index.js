import { Telegraf, Markup } from "telegraf";
import cron from "node-cron";
import fs from "fs";
import express from "express";

// === Express app –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ—Ä—Ç–æ–≤ ===
const app = express();
const PORT = process.env.PORT || 3000;

// Health check endpoint
app.get("/", (req, res) => {
  res.status(200).json({ status: "OK", message: "Bot is running" });
});

// Health check –¥–ª—è Render
app.get("/health", (req, res) => {
  res.status(200).json({ status: "healthy" });
});

// –ó–∞–ø—É—Å–∫–∞–µ–º Express —Å–µ—Ä–≤–µ—Ä
app.listen(PORT, "0.0.0.0", () => {
  console.log(`Server is running on port ${PORT}`);
});

// === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ ===
const bot = new Telegraf(process.env.BOT_TOKEN);

// === –†–∞–±–æ—Ç–∞ —Å –±–∞–∑–æ–π (JSON) ===
const DB_FILE = "./users.json";

// –∑–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
let users = {};
if (fs.existsSync(DB_FILE)) {
  try {
    users = JSON.parse(fs.readFileSync(DB_FILE, "utf-8"));
  } catch (e) {
    console.error("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è users.json:", e);
  }
}

// —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
function saveUsers() {
  fs.writeFileSync(DB_FILE, JSON.stringify(users, null, 2));
}

// === –õ–æ–≥–∏–∫–∞ —Å—Ö–µ–º—ã ===
function getPlan(day) {
  if (day <= 3) return { times: 6, interval: 2 };
  if (day <= 12) return { times: 5, interval: 2.5 };
  if (day <= 16) return { times: 4, interval: 3 };
  if (day <= 20) return { times: 3, interval: 5 };
  if (day <= 25) return { times: 2, interval: 12 };
  return null;
}

// === –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ ===
bot.start((ctx) => {
  const id = ctx.from.id;
  if (!users[id]) {
    users[id] = { startDate: new Date(), takenToday: [] };
    saveUsers();
    ctx.reply(
      "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±—É–¥—É –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å —Ç–µ–±–µ –ø–∏—Ç—å —Ç–∞–±–ª–µ—Ç–∫–∏ –ø–æ —Å—Ö–µ–º–µ. –°–µ–≥–æ–¥–Ω—è –¥–µ–Ω—å 1."
    );
  } else {
    ctx.reply("‚úÖ –¢—ã —É–∂–µ –Ω–∞—á–∞–ª –∫—É—Ä—Å. –Ø –ø—Ä–æ–¥–æ–ª–∂–∞—é –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Ç–≤–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å.");
  }
});

// –∫–∞–∂–¥—ã–π —á–∞—Å –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
cron.schedule("0 * * * *", () => {
  const now = new Date();

  for (const [id, user] of Object.entries(users)) {
    const diffDays =
      Math.floor((now - new Date(user.startDate)) / (1000 * 60 * 60 * 24)) + 1;
    const plan = getPlan(diffDays);
    if (!plan) continue;

    const takenToday = user.takenToday.filter(
      (d) => new Date(d).toDateString() === now.toDateString()
    ).length;

    if (takenToday < plan.times) {
      bot.telegram
        .sendMessage(
          id,
          `üíä –ü–æ—Ä–∞ –ø—Ä–∏–Ω—è—Ç—å —Ç–∞–±–ª–µ—Ç–∫—É! (${takenToday + 1}/${plan.times})`,
          {
            reply_markup: Markup.inlineKeyboard([
              Markup.button.callback("‚úÖ –í—ã–ø–∏–ª", "taken"),
            ]),
          }
        )
        .catch((error) => {
          console.error(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${id}:`, error);
        });
    }
  }
});

bot.action("taken", (ctx) => {
  const id = ctx.from.id;
  if (!users[id]) users[id] = { startDate: new Date(), takenToday: [] };

  users[id].takenToday.push(new Date());
  saveUsers();

  ctx.editMessageText("‚úÖ –¢–∞–±–ª–µ—Ç–∫–∞ –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –≤—ã–ø–∏—Ç–∞—è!");
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –±–æ—Ç–∞
bot.catch((err, ctx) => {
  console.error(`–û—à–∏–±–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${ctx.from?.id}:`, err);
});

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
bot
  .launch()
  .then(() => {
    console.log("Bot started successfully");
  })
  .catch((error) => {
    console.error("Failed to start bot:", error);
    process.exit(1);
  });

// Graceful shutdown
process.once("SIGINT", () => {
  bot.stop("SIGINT");
  process.exit(0);
});

process.once("SIGTERM", () => {
  bot.stop("SIGTERM");
  process.exit(0);
});
